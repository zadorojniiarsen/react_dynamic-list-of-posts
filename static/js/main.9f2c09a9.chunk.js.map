{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","POSTS_URL","serializePost","obj","id","userId","title","getUserPosts","a","fetch","then","res","json","body","map","getPostDetails","postId","Loader","className","PostsList","handlePostChange","currentPost","useState","loading","setLoading","posts","setPosts","useEffect","fetchedPosts","length","post","type","onClick","COMMENTS_URL","serializeComment","getPostComments","addComment","comment","method","headers","JSON","stringify","idContainer","deleteComment","NewCommentForm","name","email","dataFields","setDataFields","handleInput","key","value","handleSubmit","event","preventDefault","onSubmit","placeholder","onChange","e","target","required","PostDetails","curentPost","setCurentPost","comments","setComments","commentsVisible","setCommentsVisible","Promise","all","fetchedPost","fetchedCommets","handleCommentDelete","filter","addNewComment","commentData","newComment","serializeUser","getUsers","App","users","setUsers","currentOptionId","setCurrentOptionId","setCurrentPost","fetchUsers","parseInt","currentTarget","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f2c09a9.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\ntype PostBody = unknown & Post;\ntype PostDetailsBody = unknown & PostDetails;\n\nconst POSTS_URL = `${BASE_URL}/posts`;\n\nconst serializePost = (obj: PostBody): Post => ({\n  id: obj.id,\n  userId: obj.userId,\n  title: obj.title,\n});\n\nconst serializePostDetails = (obj: PostDetails): PostDetails => ({\n  id: obj.id,\n  body: obj.body,\n});\n\nexport const getUserPosts = async (userId?: number): Promise<Post[]> => {\n  const body: PostBody[] = await fetch(POSTS_URL + (userId ? `?userId=${userId}` : ''))\n    .then(res => res.json());\n\n  return body.map(serializePost);\n};\n\nexport const getPostDetails = async (postId: number): Promise<PostDetails> => {\n  const body: PostDetailsBody = await fetch(`${POSTS_URL}/${postId}`)\n    .then(res => res.json());\n\n  return serializePostDetails(body);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ninterface Props {\n  userId: number;\n  handlePostChange: (id: number) => void;\n  currentPost: number;\n}\n\nexport const PostsList: React.FC<Props> = ({ userId, handlePostChange, currentPost }) => {\n  const [loading, setLoading] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const fetchedPosts = await (userId ? getUserPosts(userId) : getUserPosts());\n\n      setPosts(fetchedPosts);\n      setLoading(false);\n    })();\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          {!posts.length ? (\n            <h2>No posts yet</h2>\n          ) : (\n            <>\n              <h2>Posts:</h2>\n\n              <ul className=\"PostsList__list\">\n                {posts.map(post => (\n                  <li key={post.id} className=\"PostsList__item\">\n                    <div>\n                      <b>\n                        [User #\n                        {post.userId}\n                        ]:\n                      </b>\n                      {post.title}\n                    </div>\n\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => handlePostChange(post.id)}\n                    >\n                      {currentPost === post.id ? 'Close' : 'Open' }\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\ntype CommentId = { id: number };\ntype CommentBody = unknown & CommentData;\n\nconst COMMENTS_URL = `${BASE_URL}/comments`;\n\nconst serializeComment = (obj: CommentBody): CommentData => ({\n  id: obj.id,\n  body: obj.body,\n});\n\nexport const getPostComments = async (postId: number): Promise<CommentData[]> => {\n  const body: CommentBody[] = await fetch(`${COMMENTS_URL}?postId=${postId}`)\n    .then(res => res.json());\n\n  return body.map(serializeComment);\n};\n\nexport const addComment = async (comment: CommentResponse): Promise<number> => {\n  const body = await fetch(COMMENTS_URL, {\n    method: 'POST',\n    headers: { 'content-type': 'aplication/json; charset=utf-8' },\n    body: JSON.stringify(comment),\n  }).then(res => res.json());\n\n  const idContainer = body as CommentId;\n\n  return idContainer.id;\n};\n\nexport const deleteComment = async (id: number): Promise<void> => {\n  await fetch(`${COMMENTS_URL}/${id}`, { method: 'DELETE' });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  addComment: (commentData: CommentResponse) => void;\n}\n\nconst emptyFields = (): CommentResponse => ({\n  name: '',\n  email: '',\n  body: '',\n});\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [dataFields, setDataFields] = useState(emptyFields());\n\n  const handleInput = (key: string, value: string) => {\n    setDataFields({\n      ...dataFields,\n      [key]: value,\n    });\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await addComment(dataFields);\n    setDataFields(emptyFields());\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={dataFields.name}\n          onChange={e => handleInput('name', e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={dataFields.email}\n          onChange={e => handleInput('email', e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={dataFields.body}\n          onChange={e => handleInput('body', e.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  postId: number;\n}\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [curentPost, setCurentPost] = useState<PostDetails | null>(null);\n  const [comments, setComments] = useState<CommentData[]>([]);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const [fetchedPost, fetchedCommets] = await Promise.all([\n        getPostDetails(postId),\n        getPostComments(postId),\n      ]);\n\n      setCurentPost(fetchedPost);\n      setComments(fetchedCommets);\n      setLoading(false);\n    })();\n  }, [postId]);\n\n  const handleCommentDelete = async (id: number) => {\n    await deleteComment(id);\n\n    setComments(comments.filter(comment => comment.id !== id));\n  };\n\n  const addNewComment = async (commentData: CommentResponse) => {\n    const id = await addComment(commentData);\n\n    const newComment = {\n      id,\n      body: commentData.body,\n    };\n\n    setComments([...comments, newComment]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            {curentPost?.body}\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => comments.length && setCommentsVisible(!commentsVisible)}\n            >\n              {commentsVisible ? 'Hide' : 'Show'}\n              {` ${comments.length} `}\n              comments\n            </button>\n            <ul className=\"PostDetails__list\">\n\n              {commentsVisible && (\n                comments.map(comment => (\n                  <li key={comment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => handleCommentDelete(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))\n              )}\n            </ul>\n\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm addComment={addNewComment} />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\ntype UserBody = unknown & User;\n\nconst serializeUser = (obj: UserBody): User => ({\n  id: obj.id,\n  name: obj.name,\n});\n\nexport const getUsers = async (): Promise<User[]> => {\n  const body: UserBody[] = await fetch(`${BASE_URL}/users`)\n    .then(res => res.json());\n\n  return body.map(serializeUser);\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentOptionId, setCurrentOptionId] = useState(0);\n  const [currentPost, setCurrentPost] = useState(0);\n\n  useEffect(() => {\n    (async () => {\n      const fetchUsers = await getUsers();\n\n      setUsers(fetchUsers);\n    })();\n  }, []);\n\n  const fetchPost = (id: number) => {\n    setCurrentPost(currentPost === id ? 0 : id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={e => setCurrentOptionId(parseInt(e.currentTarget.value, 10))}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={currentOptionId}\n            handlePostChange={fetchPost}\n            currentPost={currentPost}\n          />\n        </div>\n\n        {!!currentPost && (\n          <div className=\"App__content\">\n            <PostDetails postId={currentPost} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}